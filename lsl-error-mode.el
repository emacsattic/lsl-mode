;;; lsl-error-mode.el --- jump error location from lslint results to LSL script

;; Copyright (C) 2007 Turkey Scofield

;; Author: Turkey Scofield

;; program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Commentary:

;; OVERVIEW ==========================================================

;; lsl-error-mode.el helps you to jump to the part where the error or
;; warning point of the script that are shown from the log of lslint.

;; This mode is automatically atattied to buffer '* LSL SYNTAX ERROR *'
;; that is generated by function lsl-call-lslint. This buffer displays
;; log of lslint.

;; If you want to jump error or warning point, you should type return,
;; C-m or C-j keys on the ERROR or WARN line of '* LSL SYNTAX ERROR *'
;; buffer.

;; When you type space key, '* LSL SYNTAX ERROR *' buffer is deleted.


;; INSTALL ===========================================================

;; To install lsl-error-mode, put lsl-error-mode.el in your user elisp
;; directory. I recommend adding the following code to your ~/.emacs file.
;; (add-to-list 'load-path "<path-user-elisp>")

;;; History:

;; Written originally by Turkey Scofield 2007/2/21

;;; Code:

(if (and load-file-name
         (equal (file-name-extension load-file-name) "el"))
    (progn
      (byte-compile-file load-file-name)
      (load-file (concat (file-name-sans-extension load-file-name) ".elc")))
  (let ((source-file-name (concat (file-name-sans-extension load-file-name) ".el")))
    (if (file-newer-than-file-p source-file-name load-file-name)
        (progn
          (byte-compile-file source-file-name)
          (load-file load-file-name))
      (progn
        (defvar lsl-error-keywords
          '(
            ("^TOTAL::\.*" . font-lock-function-name-face )
            ("^[^\\.]+\\.\\(lsl\\|LSL\\|Lsl\\)" 0 font-lock-type-face)
            ("^\\(ERROR\\| WARN\\)::" 1 font-lock-warning-face t)
            ))

        (defvar lsl-error-font-lock-keywords
          (append lsl-error-keywords))

        (defvar lsl-error-mode-map nil
          "Keymap for LSL error major mode.")

        (if lsl-error-mode-map
            nil
          (setq lsl-error-mode-map (make-sparse-keymap))
          (define-key lsl-error-mode-map "\C-m" 'lsl-error-goto-error)
          (define-key lsl-error-mode-map "\C-j" 'lsl-error-goto-error)
          (define-key lsl-error-mode-map " " 'lsl-error-kill-buffer))

        (defun lsl-error-kill-buffer ()
          (interactive)
          (delete-window))

        (defun lsl-error-goto-error ()
          (interactive)
          (let ((lsl-checker-target-script nil)
                (lsl-checker-search-endp nil)
                (lsl-checker-line nil)
                (lsl-checker-column nil))
            (save-excursion
              (goto-char (point-min))
              (end-of-line)
              (setq lsl-checker-target-script (buffer-substring (point-min) (point))))
            (save-excursion
              (end-of-line)
              (setq lsl-checker-search-endp (point))
              (beginning-of-line)
              (if (re-search-forward
                   "\\(ERROR\\| WARN\\)::[ \t\n]*\([ \t\n]*\\([0-9]+\\),[ \t\n]*\\([0-9]+\\)\)"
                   lsl-checker-search-endp t)
                  (progn
                    (setq lsl-checker-line
                          (buffer-substring (match-beginning 2) (match-end 2)))
                    (setq lsl-checker-column
                          (buffer-substring (match-beginning 3) (match-end 3)))
                    (pop-to-buffer lsl-checker-target-script)
                    (goto-line (string-to-number lsl-checker-line))
                    (forward-char (- (string-to-number lsl-checker-column) 1)))))))

        (defun lsl-error-mode ()
          (interactive)
          (kill-all-local-variables)
          (setq major-mode 'lsl-error-mode)
          (setq mode-name "LSL Error")
          (use-local-map lsl-error-mode-map)
          (setq font-lock-defaults '(lsl-error-font-lock-keywords))
          (run-hooks 'lsl-error-mode-hook))))))
